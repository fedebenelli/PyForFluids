# Continuous Integration
name: PyForFluids Release

on:
  - release
  - workflow_run: 
      workflows: ["PyForFluids CI"]
      types: [completed]

jobs:
  build:
     strategy:
       matrix:
         os: [ubuntu-latest, windows-latest]
         python-version: ['3.7', '3.8', '3.9']
         exclude:
           - os: ubuntu-latest
             python-version: '3.7'
           - os: ubuntu-latest
             python-version: '3.8'
       runs-on: ${{ matrix.os }}
       steps:
       - uses: actions/checkout@v2
       - name: Set up Python
         uses: actions/setup-python@v2
         with:
           python-version: ${{ matrix.python-version }}
       - name: Install dependencies
         run: |
           python -m pip install --upgrade pip
           pip install setuptools wheel numpy
       - uses: knicknic/os-specific-run@v1
         with:
           linux: python setup.py sdist
           windows: python setup.py bdist_wheel build_ext --fcompiler=gnu95 --compiler=mingw32
       - uses: actions/upload-artifact@v2
         with:
           name: dist
           path: dist

  build-manylinux:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
      with:
        python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39'
        build-requirements: 'numpy'
        pip-wheel-args: '-w ./dist --no-deps'
    - name: Remove non-compatible packages
      run: |
        sudo rm dist/*linux_x86_64.whl
    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  deploy:
     needs: [build, build-manylinux]
     if: 
       #if: github.ref == 'refs/heads/release'
     runs-on: ubuntu-latest
     steps:
     - uses: actions/checkout@v2
     - uses: actions/download-artifact@v2
       with:
         name: dist
         path: dist
     - name: Set up Python
       uses: actions/setup-python@v2
       with:
         python-version: '3.9'
     - name: Publish
       env:
         TWINE_USERNAME: ${{ secrets.PYPI_USER }}
         TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
       run: |
         python -m pip install --upgrade pip
         pip install twine
         twine upload --skip-existing dist/*
